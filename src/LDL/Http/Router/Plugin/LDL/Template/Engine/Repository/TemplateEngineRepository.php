<?php declare(strict_types=1);

namespace LDL\Http\Router\Plugin\LDL\Template\Engine\Repository;

use LDL\Template\Contracts\TemplateEngineInterface;
use LDL\Type\Collection\Interfaces;
use LDL\Type\Collection\Types\Object\ObjectCollection;
use LDL\Type\Exception\TypeMismatchException;

class TemplateEngineRepository extends ObjectCollection
{
    /**
     * @var string
     */
    private $selected;

    /**
     * @var string
     */
    private $last;

    public function append($item, $key = null): Interfaces\CollectionInterface
    {
        if(null === $key){
            $msg = sprintf(
              '"%s", requires a key which identifies the template engine',
                __CLASS__
            );

            throw new \RuntimeException($msg);
        }

        $this->last = $key;

        return parent::append($item, $key); // TODO: Change the autogenerated stub
    }

    public function select(string $engineKey) : self
    {
        if(null !== $this->selected){
            $msg  = "Template engine : \"{$this->selected}\" was already selected";
            throw new \RuntimeException($msg);
        }

        $this->offsetGet($engineKey);
        $this->selected = $engineKey;

        return $this;
    }

    public function getLast() : TemplateEngineInterface
    {
        if(null === $this->last){
            $msg = 'No template engine was added to this repository';
            throw new \RuntimeException($msg);
        }

        return $this->offsetGet($this->last);
    }

    public function getSelectedEngine() : ?TemplateEngineInterface
    {
        return $this->offsetGet($this->selected);
    }

    public function validateItem($item): void
    {
        parent::validateItem($item);

        if($item instanceof TemplateEngineInterface){
            return;
        }

        $msg = sprintf(
            '"%s" only accepts items of type "%s", "%s" was given',
            __CLASS__,
            TemplateEngineInterface::class,
            get_class($item)
        );

        throw new TypeMismatchException($msg);
    }
}

